1. Introducing Data Types:
    => In Hardware Design Languages (HDLs), like SystemVerilog, you are not just writing software but building hardware.
    => Here, you deal with physical storage like registers and wires.
    => In HDLs, you create hardware structures. The flow includes:
        - logic elements
        - lookup tables (LUTs)
        - registers
        - external memory managed by a memory controller

2. Built-in Data Types:
    => SystemVerilog has multiple built-in types, but the most interesting ones for design are the logic and bit type:
        • logic: can represent a 0, 1, x (undefined or treated as don't care), or z (tri-state or also a don't care).
        • bit: uses less memory to store than logic, but it can only store a 0 or 1.

    => There are also four other, lesser used two state types:
        • byte: 8 bits
        • shortint: 16 bits
        • int: 32 bits
        • longint: 64 bits

3. Creating Arrays:
    => The reason that byte, shortint, int, and longint are not used as much is because typically, you will size your signals as needed; for example:
        > bit [7:0] my_byte; // define an 8 bit value
        > Here, my_byte is defined as a packed 8-bit value.
        > It's possible to also create an unpacked version:
        > bit my_byte[8]; // define an 8 bit value

    => Multi-dimensional arrays:
        * Array Declaration:
            > bit [2:0][7:0] my_array[1024][768];
            • [2:0] defines a 3-bit wide vector.
            • [7:0] defines an 8-bit wide vector.
            • [1024] and [768] define the size of the array (1024 rows, 768 columns).
        * Structure of Each Array Element:
            • Each element in my_array[row][column] is a set of 3 sub-elements (due to [2:0]), each of which is 8 bits wide ([7:0]).
            • Think of my_array[row][column] as a box containing 3 smaller boxes, each holding an 8-bit value.
        * Array Access:
            • Accessing the full element: my_array[0][0] accesses the entire 3-bit vector at the specified row and column.
            • Accessing a specific sub-element: my_array[1023][767][2] accesses the 3rd bit slice (which is an 8-bit value) in the last row and last column.

4. Querying Arrays:
    => SystemVerilog provides system functions for accessing array information:
        > $dimensions(my_array): Returns the number of dimensions in the array.
        > $left(my_array, [dimension]): Returns the leftmost index in the specified dimension of the array.
            Example: [1]=1023,[2]=767,[3]=2,[4]=7.
        > $right(my_array, [dimension]): Returns the rightmost index in the specified dimension of the array. (0 for all the dimensions).
        > $high(my_array, [dimension]): Returns the largest value in the specified dimension's range.
        > $low(my_array, [dimension]): Returns the smallest value in the specified dimension's range.
        > $size(my_array, [dimension]): Returns the size of the specified dimension, calculated as $high(my_array, [dimension]) - $low(my_array, [dimension]) + 1.
        > $increment(my_array, [dimension]): Returns 1 if $left >= $right; otherwise, returns -1. Useful for for loops.
        > $bits(): Returns the number of bits used by a particular variable or expression. This is useful for passing size information to instantiations.
        > $clog2(): Returns the size of an array that can hold the given number of items, not the value that was passed.
            For example: $clog2(4) returns 2, which can store four values from 0 to 3.

5. Assigning to Arrays:
    => When we want to assign a value to a signal defined as an array, we should size it properly to avoid warnings.
    => If we don't specify a size, then the size defaults to 32 bits.
    => Different ways of assigning:
        > '1 assigns all bits to 1
        > '0 assigns all bits to 0
        > 'z assigns all bits to z

    => With single packed dimension:
        > n'b to specify a binary value of n bits
        > n'd to specify a decimal value of n bits
        > n'h to specify a hex value of n bits
        > Example:
            logic [63:0] data;
            assign data = '1;   // same as data = 64'hFFFFFFFFFFFFFFFF;
            assign data = '0;   // same as data = 64'd0;
            assign data = 'z;   // same as data = 64'hzzzzzzzzzzzzzzzz;
            assign data = 0;    // data[31:0] = 0, data[63:32] untouched.

6. Handling Multiple-driven Nets: 
    => The wire type represents 120 different possible values; that is, the four basic values - 0, 1, x, and z - and drive strengths.
    => The wire type has what is known as a resolution function.
    => Wire types are the only signals that can be connected to multiple drivers.

7. Handling Signed and Unsigned Numbers:
    => Verilog had just one signed signal type, integer.
    => SystemVerilog allows us to define both unsigned and signed numbers explicitly for any built-in type: 
        > bit signed [31:0] signed_vect;        // Create a 32 bit signed value
        > bit unsigned [31:0] unsigned_vect;    // create a 32 bit unsigned value

8. Casting Signed and Unsigned Numbers:
    => You can cast an unsigned number to a signed number by using the signed' keyword.
    => You can cast a signed number to an unsigned number by using the unsigned' keyword.
    => These are equivalent to the Verilog system functions; that is, $signed() and $unsigned().

9. Creating User-defined Types:
    => We can create our own types using typedef.
    => Practical Example:
        'ifdef FAST_SIM
            typedef bit bit_t
        'else
            typedef logic bit_t
        'endif

    => Creating Structures:
        * Structures allow us to group signals that belong together.
        > typedef struct packed { bit [7:0] h; bit [7:0] l; } reg_t;
            - typedef signifies we are creating a user-defined type.
            - struct means we are creating a structure.
            - packed signifies the structure is to be packed in-memory.

    => Creating Unions:
        * A union allows us to create a variable with multiple representations.
        > union packed { bit [15:0] x; cpu_reg cr; } a_reg;

10. Enumerated Types:
    => Enumerated types are used to make the code more readable.
    => Example:
        > enum bit [1:0] { BLUE, RED, GREEN } color;
