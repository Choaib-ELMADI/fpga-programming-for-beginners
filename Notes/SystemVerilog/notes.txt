=> Testbench modules are top-level modules. They should not have any ports.

=> In Verilog, logic variables can hold the following four-state values:
    0 ---> Logic low (false)
    1 ---> Logic high (true)
    X ---> Unknown (an indeterminate state)
    Z ---> High-impedance (tri-state, effectively disconnected)

=> A testbench module is a specialized piece of code used in HDLs to verify and validate the functionality of a design under test (DUT).
-> The testbench generates a set of input signals, often referred to as stimulus, to drive the DUT. This includes all possible input scenarios that the design may encounter during actual operation.
-> If the DUT is a synchronous design, the testbench provides clock and reset signals.
-> The testbench observes the outputs of the DUT and compares them against expected values.
-> In a testbench module, we create instances of the designs under test.
-> There are multiple ways of connecting ports:
    .* which will connect all ports with the same name.
    .<name> which uses the name of the port you wish to connect.
    .<old_name>(<new_name>) which allows port renaming.

=> In Vivado, to change the parameters in a testbench, select: Settings -> Simulation -> Generics\Parameters.
=> In Vivado, to change the parameters in an implementation, select: Settings -> General -> Generics\Parameters.

=> In general, there are three ways of testing your design:
    > Simulating using targeted testing
    > Simulating using randomized testing
    > Simulating using constrained randomization

=> A generate statement can be used to selectively create code.
-> The format of a generate statement is generate <condition>, as follows:
    > generate
    >   if (SELECTOR == "UNIQUE_CASE") begin: g_UNIQUE_CASE
    >       // YOUR CODE HERE
    >   end else if (SELECTOR == "CASE") begin: g_CASE
    >       // YOUR CODE HERE
    >   end
    >   ...
    > endgenerate
